MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "06 August 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:45:46" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                06 August 2022
Time:                19:45:46
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O26I_17P "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O26I_17P new;
MPRINT(EM_DIAGRAM):   run;
23729      %let EMEXCEPTIONSTRING=;
23730      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23731      * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
23732      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23733      %let EM_ACTION = SCORE;
23734      %let syscc = 0;
23735      %macro main;
23736      
23737        %if %upcase(&EM_ACTION) = CREATE %then %do;
23738          filename temp catalog 'sashelp.emmodl.tree_create.source';
23739          %include temp;
23740          filename temp;
23741      
23742          %em_tree_create;
23743        %end;
23744      
23745         %else
23746         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23747      
23748             filename temp catalog 'sashelp.emmodl.tree_train.source';
23749             %include temp;
23750             filename temp;
23751             %em_tree_train;
23752         %end;
23753      
23754        %else
23755        %if %upcase(&EM_ACTION) = SCORE %then %do;
23756          filename temp catalog 'sashelp.emmodl.tree_score.source';
23757          %include temp;
23758          filename temp;
23759      
23760          %em_tree_score;
23761      
23762        %end;
23763      
23764        %else
23765        %if %upcase(&EM_ACTION) = REPORT %then %do;
23766      
23767             filename temp catalog 'sashelp.emmodl.tree_report.source';
23768             %include temp;
23769             filename temp;
23770      
23771             %em_tree_report;
23772         %end;
23773      
23774        %else
23775        %if %upcase(&EM_ACTION) = OPENINT %then %do;
23776      
23777             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23778             %include temp;
23779             filename temp;
23780             %EM_TREE_OPENTREEVIEWER;
23781      
23782         %end;
23783      
23784        %else
23785        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
23786      
23787             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23788             %include temp;
23789             filename temp;
23790             %EM_TREE_CLOSETREEVIEWER;
23791      
23792         %end;
23793      
23794      
23795         %doendm:
23796      %mend main;
23797      
23798      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
23800     +%macro em_tree_score;
23802     +   /* determine if multiple targets will be processed */
23803     +   %let em_tree_multipleTargets=N;
23804     +   %let em_tree_numTarget=1;
23805     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
23806     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
23807     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
23808     +         %let em_tree_multipleTargets=N;
23809     +      %end;
23810     +      %else %do;
23811     +         /* create macro array of targets  */
23812     +         data _null_;
23813     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
23814     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
23815     +           if eof then
23816     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
23817     +        run;
23819     +        %if &em_tree_numTarget gt 1 %then %do;
23820     +           %let em_tree_multipleTargets=Y;
23821     +        %end;
23822     +      %end;
23823     +   %end;
23825     +   /* build flow and publish scoring code */
23826     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
23827     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
23829     +   filename treeflow "&EM_USER_TREEFLOW";
23830     +   filename treepub "&EM_USER_TREEPUBLISH";
23832     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
23833     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
23835     +   %em_copyfile(infref=treeflow, outfref=flowref);
23836     +   %em_copyfile(infref=treepub, outfref=pubref);
23838     +   filename treeflow;
23839     +   filename treepub;
23841     +   /* if priors are used, add code to generate unadjusted residuals in export */
23842     +   %let useAdjPriors = N;
23843     +   data _null_;
23844     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
23845     +     if USE="Y" then call symput('useAdjPriors', 'Y');
23846     +   run;
23847     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
23848     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
23849     +      %include temp;
23850     +      filename temp;
23852     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
23853     +      filename adjref "&EM_USER_adjResidualCode";
23854     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
23856     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
23858     +      filename adjref;
23859     +   %end;
23861     +   /* LEAF */
23862     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
23863     +      data _null_;
23864     +        file flowref mod;
23865     +        put 'drop _LEAF_;';
23866     +      run;
23868     +      data _null_;
23869     +        file pubref mod;
23870     +        put 'drop _LEAF_;';
23871     +      run;
23873     +   %end;
23875     +   filename flowref;
23876     +   filename pubref;
23878     +   /* em_metachange code */
23879     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
23880     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
23881     +   %end;
23883     +   /* variable selection based on importance stat    */
23884     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
23885     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
23886     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
23887     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
23888     +     %let obs = %sysfunc(fetch(&dsid));
23889     +     %do %while(&obs=0);
23890     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
23891     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
23892     +       %EM_METACHANGE(name=&varname, role=REJECTED);
23893     +       %let obs = %sysfunc(fetch(&dsid));
23894     +     %end;
23895     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
23896     +   %end;
23898     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
23899     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23900     +    %let tree_pred_vars = ;
23901     +    %let tree_pred_lvl =;
23902     +    %let numpred= 0;
23904     +    data _null_;
23905     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
23906     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
23907     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
23908     +     if eof then
23909     +       call symput('numpred', strip(put(_N_, BEST.)));
23910     +    run;
23911     +   %end;
23913     +   %if &numpred ne 0 %then %do;
23914     +    %do i=1 %to &numpred;
23915     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
23916     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
23917     +    %end;
23918     +   %end;
23920     +   /* determine if multiple targets will be processed */
23921     +   %let em_tree_multipleTargets=N;
23922     +   %let em_tree_numTarget=1;
23923     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
23924     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
23925     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
23926     +         %let em_tree_multipleTargets=N;
23927     +      %end;
23928     +      %else %do;
23929     +        data _null_;
23930     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
23931     +          if eof then
23932     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
23933     +        run;
23935     +        %if &em_tree_numTarget gt 1 %then %do;
23936     +           %let em_tree_multipleTargets=Y;
23937     +        %end;
23938     +     %end;
23939     +   %end;
23941     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
23942     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
23944     +      /* variable importance */
23945     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
23946     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
23948     +         %let validexist=0;
23949     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
23950     +           %let validexist=1;
23951     +         %end;
23953     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
23954     +         /* and the columns may not be generated                                                                                 */
23955     +         %let em_tree_cvexists=;
23956     +         %let em_tree_surrexists=.;
23957     +         data _null_;
23958     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
23959     +            if eof then do ;
23960     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
23961     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
23962     +            end;
23963     +         run;
23965     +         data &EM_USER_OUTIMPORT;
23966     +            set &EM_USER_OUTIMPORT;
23968     +            /* format columns based on Precison value specified */
23969     +            format importance 15.&EM_PROPERTY_PRECISION
23970     +                 %if &validexist %then %do;
23971     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
23972     +                 %end;
23973     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
23974     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
23975     +                 %end;
23976     +            ;
23977     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
23978     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
23979     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
23980     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
23981     +                 %if "&em_tree_surrexists" ne "" %then %do;
23982     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
23983     +                 %end;
23984     +                 %if &validexist %then %do;
23985     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
23986     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
23987     +                 %end;
23988     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
23989     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
23990     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
23991     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
23992     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
23993     +                 %end;
23994     +            ;
23995     +         run;
23997     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
23998     +      %end;
23999     +   %end;
24001     +   %doendm:
24002     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06 August 2022 19:45:46,
      Create Time=06 August 2022 17:05:04

NOTE: 102 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 77.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06 August 2022 19:45:46,
      Create Time=06 August 2022 17:05:04

NOTE: 78 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 77.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_Class_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_CLASS_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4209,
      Last Modified=06 August 2022 19:45:46,
      Create Time=06 August 2022 17:05:04

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3294,
      Last Modified=06 August 2022 19:45:46,
      Create Time=06 August 2022 17:05:04

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("age                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("breast                          ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("breast_quad                     ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("menopause                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("irradiat                        ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("tumor_size                      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("node_caps                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_Class_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_CLASS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Classrecurrence_events");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Classno_recurrence_events");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training 
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3489667169512;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24003      
24004      *------------------------------------------------------------*;
24005      * End SCORE: Tree;
24006      *------------------------------------------------------------*;

24007      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
24008      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
24009      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

24010      filename x "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
24011      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
24012      file x;
MPRINT(EM_DIAGRAM):   file x;
24013      put 'if upcase(NAME) = "AGE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "AGE" then do;';
24014      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24015      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24016      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24017      put 'if upcase(NAME) = "BREAST" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "BREAST" then do;';
24018      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24019      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24020      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24021      put 'if upcase(NAME) = "BREAST_QUAD" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "BREAST_QUAD" then do;';
24022      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24023      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24024      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24025      put 'if upcase(NAME) = "IRRADIAT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IRRADIAT" then do;';
24026      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24027      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24028      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24029      put 'if upcase(NAME) = "MENOPAUSE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MENOPAUSE" then do;';
24030      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24031      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24032      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24033      put 'if upcase(NAME) = "NODE_CAPS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "NODE_CAPS" then do;';
24034      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24035      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24036      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24037      put 'if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;';
24038      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24039      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24040      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24041      put 'if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;';
24042      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24043      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24044      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24045      put 'if upcase(NAME) = "TUMOR_SIZE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TUMOR_SIZE" then do;';
24046      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24047      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24048      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24049      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
24050      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
24051      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
24052      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24053      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06 August 2022 19:45:46,
      Create Time=06 August 2022 16:06:54

NOTE: 40 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24054      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
24055      filename emflow "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24056      *------------------------------------------------------------*;
24057      * Tree: Scoring DATA data;
24058      *------------------------------------------------------------*;
24059      data EMWS1.Tree_TRAIN
24060      / view=EMWS1.Tree_TRAIN
24061      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TRAIN / view=EMWS1.Tree_TRAIN ;
24062      set EMWS1.Impt_TRAIN
24063      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
24064      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
24065     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24066     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
24067     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24068     +
24069     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
24070     +LENGTH F_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH F_Class $ 20;
24071     +LENGTH I_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH I_Class $ 20;
24072     +LENGTH U_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH U_Class $ 20;
24073     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
24074     +
24075     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
24076     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
24077     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
24078     +label P_Classno_recurrence_events = 'Predicted: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_Classno_recurrence_events = 'Predicted: Class=no-recurrence-events' ;
24079     +label P_Classrecurrence_events = 'Predicted: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_Classrecurrence_events = 'Predicted: Class=recurrence-events' ;
24080     +label Q_Classno_recurrence_events =
24081     +'Unadjusted P: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_Classno_recurrence_events = 'Unadjusted P: Class=no-recurrence-events' ;
24082     +label Q_Classrecurrence_events = 'Unadjusted P: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_Classrecurrence_events = 'Unadjusted P: Class=recurrence-events' ;
24083     +label V_Classno_recurrence_events = 'Validated: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_Classno_recurrence_events = 'Validated: Class=no-recurrence-events' ;
24084     +label V_Classrecurrence_events = 'Validated: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_Classrecurrence_events = 'Validated: Class=recurrence-events' ;
24085     +label R_Classno_recurrence_events = 'Residual: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_Classno_recurrence_events = 'Residual: Class=no-recurrence-events' ;
24086     +label R_Classrecurrence_events = 'Residual: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_Classrecurrence_events = 'Residual: Class=recurrence-events' ;
24087     +label F_Class = 'From: Class' ;
MPRINT(EM_DIAGRAM):   label F_Class = 'From: Class' ;
24088     +label I_Class = 'Into: Class' ;
MPRINT(EM_DIAGRAM):   label I_Class = 'Into: Class' ;
24089     +label U_Class = 'Unnormalized Into: Class' ;
MPRINT(EM_DIAGRAM):   label U_Class = 'Unnormalized Into: Class' ;
24090     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
24091     +
24092     +
24093     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
24094     +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_20 $ 20;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_20;
24095     +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = ' ';
24096     +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_5 $ 5;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_5;
24097     +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = ' ';
24098     +
24099     +
24100     +_ARBFMT_20 = PUT( Class , $20.);
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = PUT( Class , $20.);
24101     + %DMNORMCP( _ARBFMT_20, F_Class );
MPRINT(DMNORMCP):   F_Class=dmnorm(_ARBFMT_20,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(deg_malig ) AND 2.5 <= deg_malig THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = PUT( inv_nodes , $5.);
24102     +
24103     +******             ASSIGN OBSERVATION TO NODE             ******;
24104     +IF  NOT MISSING(deg_malig ) AND
24105     +                   2.5 <= deg_malig  THEN DO;
24106     +  _ARBFMT_5 = PUT( inv_nodes , $5.);
24107     +   %DMNORMIP( _ARBFMT_5);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.54545454545454;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.45454545454545;
24108     +  IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.54545454545454;
24109     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.45454545454545;
24110     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.88888888888888;
24111     +    P_Classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.11111111111111;
24112     +    P_Classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   I_Class = 'NO-RECURRENCE-EVENTS' ;
24113     +    Q_Classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   U_Class = 'no-recurrence-events' ;
24114     +    Q_Classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   END;
24115     +    V_Classno_recurrence_events  =     0.88888888888888;
24116     +    V_Classrecurrence_events  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   ELSE DO;
24117     +    I_Class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
24118     +    U_Class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
24119     +    END;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.13333333333333;
24120     +  ELSE DO;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.13333333333333;
24121     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.86666666666666;
24122     +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.35294117647058;
24123     +    P_Classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.64705882352941;
24124     +    P_Classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   I_Class = 'RECURRENCE-EVENTS' ;
24125     +    Q_Classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   U_Class = 'recurrence-events' ;
24126     +    Q_Classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   END;
24127     +    V_Classno_recurrence_events  =     0.35294117647058;
MPRINT(EM_DIAGRAM):   END;
24128     +    V_Classrecurrence_events  =     0.64705882352941;
24129     +    I_Class  = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
24130     +    U_Class  = 'recurrence-events' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
24131     +    END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
24132     +  END;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.81428571428571;
24133     +ELSE DO;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.18571428571428;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.81428571428571;
24134     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.18571428571428;
24135     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.77049180327868;
24136     +  P_Classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.22950819672131;
24137     +  P_Classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   I_Class = 'NO-RECURRENCE-EVENTS' ;
24138     +  Q_Classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   U_Class = 'no-recurrence-events' ;
24139     +  Q_Classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   END;
24140     +  V_Classno_recurrence_events  =     0.77049180327868;
24141     +  V_Classrecurrence_events  =     0.22950819672131;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
24142     +  I_Class  = 'NO-RECURRENCE-EVENTS' ;
24143     +  U_Class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   IF F_Class NE 'NO-RECURRENCE-EVENTS' AND F_Class NE 'RECURRENCE-EVENTS' THEN DO;
24144     +  END;
MPRINT(EM_DIAGRAM):   R_Classno_recurrence_events = .;
24145     +
MPRINT(EM_DIAGRAM):   R_Classrecurrence_events = .;
24146     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
24147     +IF  F_Class  NE 'NO-RECURRENCE-EVENTS'
24148     +AND F_Class  NE 'RECURRENCE-EVENTS'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
24149     +        R_Classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_Classno_recurrence_events = -P_Classno_recurrence_events ;
24150     +        R_Classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_Classrecurrence_events = -P_Classrecurrence_events ;
24151     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_Class );
24152     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( 'NO-RECURRENCE-EVENTS' ) R_Classno_recurrence_events = R_Classno_recurrence_events +1;
24153     +       R_Classno_recurrence_events  =  -P_Classno_recurrence_events ;
24154     +       R_Classrecurrence_events  =  -P_Classrecurrence_events ;
MPRINT(EM_DIAGRAM):   WHEN( 'RECURRENCE-EVENTS' ) R_Classrecurrence_events = R_Classrecurrence_events +1;
24155     +       SELECT( F_Class  );
MPRINT(EM_DIAGRAM):   END;
24156     +          WHEN( 'NO-RECURRENCE-EVENTS'  ) R_Classno_recurrence_events  =
MPRINT(EM_DIAGRAM):   END;
24157     +        R_Classno_recurrence_events  +1;
24158     +          WHEN( 'RECURRENCE-EVENTS'  ) R_Classrecurrence_events  =
MPRINT(EM_DIAGRAM):   ****************************************************************;
24159     +        R_Classrecurrence_events  +1;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
24160     +       END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24161     + END;
24162     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
24163     +****************************************************************;
24164     +******          END OF DECISION TREE SCORING CODE         ******;
24165     +****************************************************************;
24166     +
24167     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
24168      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
24169      quit;
24170      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
24171      filename emflow "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24172      *------------------------------------------------------------*;
24173      * Tree: Scoring VALIDATE data;
24174      *------------------------------------------------------------*;
24175      data EMWS1.Tree_VALIDATE
24176      / view=EMWS1.Tree_VALIDATE
24177      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_VALIDATE / view=EMWS1.Tree_VALIDATE ;
24178      set EMWS1.Impt_VALIDATE
24179      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
24180      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
24181     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24182     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
24183     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24184     +
24185     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
24186     +LENGTH F_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH F_Class $ 20;
24187     +LENGTH I_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH I_Class $ 20;
24188     +LENGTH U_Class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH U_Class $ 20;
24189     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
24190     +
24191     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
24192     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
24193     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
24194     +label P_Classno_recurrence_events = 'Predicted: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_Classno_recurrence_events = 'Predicted: Class=no-recurrence-events' ;
24195     +label P_Classrecurrence_events = 'Predicted: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_Classrecurrence_events = 'Predicted: Class=recurrence-events' ;
24196     +label Q_Classno_recurrence_events =
24197     +'Unadjusted P: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_Classno_recurrence_events = 'Unadjusted P: Class=no-recurrence-events' ;
24198     +label Q_Classrecurrence_events = 'Unadjusted P: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_Classrecurrence_events = 'Unadjusted P: Class=recurrence-events' ;
24199     +label V_Classno_recurrence_events = 'Validated: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_Classno_recurrence_events = 'Validated: Class=no-recurrence-events' ;
24200     +label V_Classrecurrence_events = 'Validated: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_Classrecurrence_events = 'Validated: Class=recurrence-events' ;
24201     +label R_Classno_recurrence_events = 'Residual: Class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_Classno_recurrence_events = 'Residual: Class=no-recurrence-events' ;
24202     +label R_Classrecurrence_events = 'Residual: Class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_Classrecurrence_events = 'Residual: Class=recurrence-events' ;
24203     +label F_Class = 'From: Class' ;
MPRINT(EM_DIAGRAM):   label F_Class = 'From: Class' ;
24204     +label I_Class = 'Into: Class' ;
MPRINT(EM_DIAGRAM):   label I_Class = 'Into: Class' ;
24205     +label U_Class = 'Unnormalized Into: Class' ;
MPRINT(EM_DIAGRAM):   label U_Class = 'Unnormalized Into: Class' ;
24206     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
24207     +
24208     +
24209     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
24210     +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_20 $ 20;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_20;
24211     +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = ' ';
24212     +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_5 $ 5;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_5;
24213     +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = ' ';
24214     +
24215     +
24216     +_ARBFMT_20 = PUT( Class , $20.);
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = PUT( Class , $20.);
24217     + %DMNORMCP( _ARBFMT_20, F_Class );
MPRINT(DMNORMCP):   F_Class=dmnorm(_ARBFMT_20,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
24218     +
24219     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
24220     +IF  NOT MISSING(deg_malig ) AND
24221     +                   2.5 <= deg_malig  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(deg_malig ) AND 2.5 <= deg_malig THEN DO;
24222     +  _ARBFMT_5 = PUT( inv_nodes , $5.);
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = PUT( inv_nodes , $5.);
24223     +   %DMNORMIP( _ARBFMT_5);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
24224     +  IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
24225     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
24226     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
24227     +    P_Classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.54545454545454;
24228     +    P_Classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.45454545454545;
24229     +    Q_Classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.54545454545454;
24230     +    Q_Classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.45454545454545;
24231     +    V_Classno_recurrence_events  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.88888888888888;
24232     +    V_Classrecurrence_events  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.11111111111111;
24233     +    I_Class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_Class = 'NO-RECURRENCE-EVENTS' ;
24234     +    U_Class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_Class = 'no-recurrence-events' ;
24235     +    END;
MPRINT(EM_DIAGRAM):   END;
24236     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
24237     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
24238     +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
24239     +    P_Classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.13333333333333;
24240     +    P_Classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.86666666666666;
24241     +    Q_Classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.13333333333333;
24242     +    Q_Classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.86666666666666;
24243     +    V_Classno_recurrence_events  =     0.35294117647058;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.35294117647058;
24244     +    V_Classrecurrence_events  =     0.64705882352941;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.64705882352941;
24245     +    I_Class  = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_Class = 'RECURRENCE-EVENTS' ;
24246     +    U_Class  = 'recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_Class = 'recurrence-events' ;
24247     +    END;
MPRINT(EM_DIAGRAM):   END;
24248     +  END;
MPRINT(EM_DIAGRAM):   END;
24249     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
24250     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
24251     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
24252     +  P_Classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   P_Classno_recurrence_events = 0.81428571428571;
24253     +  P_Classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   P_Classrecurrence_events = 0.18571428571428;
24254     +  Q_Classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   Q_Classno_recurrence_events = 0.81428571428571;
24255     +  Q_Classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   Q_Classrecurrence_events = 0.18571428571428;
24256     +  V_Classno_recurrence_events  =     0.77049180327868;
MPRINT(EM_DIAGRAM):   V_Classno_recurrence_events = 0.77049180327868;
24257     +  V_Classrecurrence_events  =     0.22950819672131;
MPRINT(EM_DIAGRAM):   V_Classrecurrence_events = 0.22950819672131;
24258     +  I_Class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_Class = 'NO-RECURRENCE-EVENTS' ;
24259     +  U_Class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_Class = 'no-recurrence-events' ;
24260     +  END;
MPRINT(EM_DIAGRAM):   END;
24261     +
24262     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
24263     +IF  F_Class  NE 'NO-RECURRENCE-EVENTS'
24264     +AND F_Class  NE 'RECURRENCE-EVENTS'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Class NE 'NO-RECURRENCE-EVENTS' AND F_Class NE 'RECURRENCE-EVENTS' THEN DO;
24265     +        R_Classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_Classno_recurrence_events = .;
24266     +        R_Classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_Classrecurrence_events = .;
24267     + END;
MPRINT(EM_DIAGRAM):   END;
24268     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
24269     +       R_Classno_recurrence_events  =  -P_Classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   R_Classno_recurrence_events = -P_Classno_recurrence_events ;
24270     +       R_Classrecurrence_events  =  -P_Classrecurrence_events ;
MPRINT(EM_DIAGRAM):   R_Classrecurrence_events = -P_Classrecurrence_events ;
24271     +       SELECT( F_Class  );
MPRINT(EM_DIAGRAM):   SELECT( F_Class );
24272     +          WHEN( 'NO-RECURRENCE-EVENTS'  ) R_Classno_recurrence_events  =
24273     +        R_Classno_recurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'NO-RECURRENCE-EVENTS' ) R_Classno_recurrence_events = R_Classno_recurrence_events +1;
24274     +          WHEN( 'RECURRENCE-EVENTS'  ) R_Classrecurrence_events  =
24275     +        R_Classrecurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'RECURRENCE-EVENTS' ) R_Classrecurrence_events = R_Classrecurrence_events +1;
24276     +       END;
MPRINT(EM_DIAGRAM):   END;
24277     + END;
MPRINT(EM_DIAGRAM):   END;
24278     +
24279     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24280     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
24281     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24282     +
24283     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
24284      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
24285      quit;
24286      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
24288      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
24289      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
24290      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24291      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24292      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
24293      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree_TRAIN out=WORK.M3CQC0U1 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CQC0U1;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CQC0U1(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CQC0U1;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CQC0U1;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0K8KSQT NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2DXGFAD(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   set WORK.M0K8KSQT;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("CLASS") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "AGE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "BREAST" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "BREAST_QUAD" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "IRRADIAT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MENOPAUSE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "NODE_CAPS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TUMOR_SIZE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
24679      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
24680      set EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO;
24681      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
24682      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24683      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMINFO;
24684      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
24685      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
24686      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
24690      run;
24691      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
24692      set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
24693      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

24694      proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
24695      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
24696      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
