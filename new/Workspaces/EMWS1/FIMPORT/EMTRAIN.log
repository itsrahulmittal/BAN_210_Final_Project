MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "06 August 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:43:20" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                06 August 2022
Time:                19:43:20
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2EP2NVW "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2EP2NVW new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "06 August 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:43:20" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                RAHUL AGARWAL";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "06 August 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:43:20" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                RAHUL AGARWAL";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21284      proc freq data=EMWS1.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.FIMPORT_VariableSet noprint;
21285      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
21286      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

21287      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
21288      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21289      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21290      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21291      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21292      run;

NOTE: There were 3 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

21293      title10;
MPRINT(EM_DIAGRAM):   title10;
21294      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'BAN210 Final Project';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Final';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21625      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21626      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
21627      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21628      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21629      %let EMEXCEPTIONSTRING=;
21630      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21631      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
21632      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21633      %let EM_ACTION = TRAIN;
21634      %let syscc = 0;
21635      /* Fimport.source */
21636      %macro main;
21637            %if %upcase(&EM_ACTION) = CREATE %then %do;
21638               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
21639               %include temp;
21640               filename temp;
21641               %create;
21642            %end;
21643            %else
21644            %if %upcase(&EM_ACTION) = TRAIN %then %do;
21645               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
21646               %include temp;
21647               filename temp;
21648               %train;
21649            %end;
21650            %else
21651            %if %upcase(&EM_ACTION) = UPDATE %then %do;
21652               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
21653               %include temp;
21654               filename temp;
21655               %update;
21656            %end;
21657            %else
21658            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
21659               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21660               %include temp;
21661               filename temp;
21662               %property;
21663            %end;
21664             %else
21665            %if %upcase(&EM_ACTION) = SCORE %then %do;
21666               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
21667               %include temp;
21668               filename temp;
21669               %score;
21670            %end;
21671            %else
21672            %if %upcase(&EM_ACTION) = REPORT %then %do;
21673               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
21674               %include temp;
21675               filename temp;
21676               %report;
21677            %end;
21678            %else
21679            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
21680               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21681               %include temp;
21682               filename temp;
21683               %openvariableset;
21684            %end;
21685            %else
21686            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
21687               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
21688               %include temp;
21689               filename temp;
21690               %closevariableset;
21691            %end;
21692      %mend main;
21693      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
21694     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
21695     +%macro appendExt;
21696     +   data _null_;
21697     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
21698     +      rfile = reverse(tempuif);
21699     +      period = indexc(rfile,".");
21700     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
21701     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
21702     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
21703     +   run;
21704     +%mend appendExt;
21706     +%macro getNobs(ds);
21707     + %global dset nobs;
21708     + %let dset=&ds;
21709     + %let dsid = %sysfunc(open(&dset));
21710     + %if &dsid %then %do;
21711     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
21712     +      %let rc = %sysfunc(close(&dsid));
21713     +   %end;
21714     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
21715     +%mend getNobs;
21716     +%macro keepordrop;
21717     +  proc contents data=work.importfile noprint
21718     +  out=work.importattrs;
21719     +  run;
21720     +  %getNobs(work.importattrs);
21721     +  data _null_;
21722     +    set  work.importattrs;
21723     +    call symput("varname"||left(_n_),name);
21724     +  run;
21726     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
21727     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
21728     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
21729     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
21730     +     %put diff=&diff;
21731     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
21732     +         %let kORd = keep;
21733     +             %let start=1;
21734     +             %let end = &EM_PROPERTY_MAXCOLS;
21735     +       %end;
21736     +     %else %do;
21737     +         %let kORd = drop;
21738     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
21739     +             %let end = &nobs;
21740     +       %end;
21741     +     data &em_user_data;
21742     +        set &em_user_data;
21743     +        &kORd
21744     +        %do i = &start %to &end;
21745     +            &&varname&i
21746     +         %end;
21747     +        ;
21748     +     run;
21749     +%end;
21750     +%mend keepordrop;
21751     +%macro dropformatvars;
21752     +   %put fmtcnt=&fmtcnt;
21753     +   data new;
21754     +     set work.importfile;
21755     +     %do i = 1 %to &fmtcnt;
21756     +       x1zy&i =put(&&varname&i,&&fmt&i);
21757     +     %end;
21758     +   run;
21759     +   data new;
21760     +     set new;
21761     +     drop
21762     +     %do i = 1 %to &fmtcnt;
21763     +     &&varname&i
21764     +     %end;
21765     +     ;
21766     +   run;
21767     +   proc datasets library=work nolist;
21768     +     modify new;
21769     +     %do i = 1 %to &fmtcnt;
21770     +     rename x1zy&i=&&varname&i;
21771     +     %end;
21772     +   run; quit;
21773     +   data work.importfile;
21774     +     set new;
21775     +   run;
21776     +%mend;
21778     +%macro procimport(out=);
21779     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
21780     +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
21781     +         out=&out
21782     +         dbms = ACCESS
21783     +         replace;
21784     +         database="%trim(&_IFILENAME)"
21785     +   %end;
21786     +   %else %do;
21787     +       proc import datafile="%trim(&_IFILENAME)"
21788     +          out=&out
21790     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
21791     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
21792     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
21793     +         dbms=&EM_PROPERTY_FILETYPE
21794     +      %end;
21795     +      %else %do;
21796     +         dbms=TAB
21797     +      %end;
21798     +      /* Work around for the following defects:S0560899 and S0560009.   */
21799     +      %let sasEnv=%sysfunc(getlocenv());
21800     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
21801     +         dbms=EXCEL
21802     +      %end;
21804     +      replace;
21805     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
21806     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
21807     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
21808     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
21809     +            getnames=&EM_PROPERTY_NAMEROW;
21810     +        %end;
21811     +      %end;
21812     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
21813     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
21814     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
21815     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
21816     +               delimiter=" ";
21817     +            %end;
21818     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
21819     +               /* Do not specifiy a delimiter */
21820     +            %end;
21821     +            %else %do;
21822     +               delimiter="&EM_PROPERTY_DELIMITER";
21823     +            %end;
21824     +         %end;
21825     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
21826     +            datarow=&EM_PROPERTY_SKIPROWS;
21827     +            /* Guessingrows must be >= skiprows */
21828     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
21829     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
21830     +            %end;
21831     +         %end;
21832     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
21833     +            guessingrows=&EM_PROPERTY_GUESSROWS;
21834     +         %end;
21835     +       %end;
21836     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
21837     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21838     +            FMTLIB = work.formats;
21839     +      %end;
21840     +   %end;
21841     +   run;
21842     +%mend procimport;
21844     +%macro train;
21846     +   %let vvnString = %sysfunc(getoption(validvarname));
21848     +   %em_getname(key=DATA,           type=DATA);
21849     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
21850     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
21851     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
21853     +   %appendExt;
21855     +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
21856     +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
21857     +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
21858     +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
21859     +   %end;
21861     +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
21862     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
21863     +       %goto endtrain;
21864     +   %end;
21866     +   options validvarname=ANY;
21867     +   %procimport(out=work.importfile);
21869     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
21870     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
21871     +      %global fmtcnt;
21872     +      %let fmtcnt=0;
21873     +      proc contents data=work.importfile out=work.impattrs noprint;
21874     +      run;
21875     +      data _null_;
21876     +        set work.impattrs;
21877     +        if _n_=1 then i=0;
21878     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
21879     +           i = i+1;
21880     +           varname = substr(name, 1, length(name));
21881     +           call symput("fmt"||left(i), trim(format)||".");
21882     +           call symput("varname"||left(i), varname);
21883     +           call symput("fmtcnt",left(i));
21884     +      end;
21885     +      retain i;
21886     +     run;
21887     +    %if &fmtcnt > 0 %then %do;
21888     +       %dropformatvars;
21889     +    %end;
21890     +    proc datasets lib=work memtype=data nolist;
21891     +        modify importfile;
21892     +        attrib _all_ format=;
21893     +    run;
21894     +    quit;
21895     +   %end;
21897     +   %let _fimportObs  = 0;
21898     +   %let _fimportVars = 0;
21899     +   %if %sysfunc(exist(work.importFile)) %then %do;
21900     +       %let dsid = %sysfunc(open(work.importFile));
21901     +       %if &dsid %then %do;
21902     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
21903     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
21904     +       %let dsid = %sysfunc(close(&dsid));
21905     +       %end;
21906     +   %end;
21908     +   %if ^&_fimportObs %then %do;
21909     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
21910     +       %goto endtrain;
21911     +   %end;
21912     +   %if ^&_fimportVars %then %do;
21913     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
21914     +       %goto endtrain;
21915     +   %end;
21917     +   data &em_user_data;
21918     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
21919     +   run;
21920     +   %keepordrop;
21922     +   %em_getname(key=EMSTAT,     type=DATA);
21924     +   proc datasets lib=&em_lib nolist;
21925     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
21926     +   run;
21928     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
21929     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
21930     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
21931     +            maxPercentMissing=50, applyMaxClassLevels=Y,
21932     +            maxClassLevels=20, identifyEmptyColumns=Y,
21933     +            outdata=&em_user_EMCMETADEFAULT,
21934     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
21936     +        data &em_user_emcmetadefault;
21937     +           set &em_user_emcmetadefault;
21938     +           drop nlevel pctmiss min max mean std skewness kurtosis;
21939     +        run;
21941     +        data &em_data_eminfo;
21942     +           length TARGET KEY $32  DATA $43;
21943     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
21944     +        run;
21946     +        %let EM_META_ADVISOR=ADVANCED;
21948     +   %end;
21949     +   %else %do;
21950     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
21951     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
21952     +            identifyEmptyColumns=N,   maxLevelDetection=0,
21953     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
21955     +            %if "&em_property_summarize" eq "Y" %then %do;
21956     +                %em_getname(key=EMSTAT,  type=DATA);
21957     +                data &em_data_eminfo;
21958     +                   length TARGET KEY $32  DATA $43;
21959     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
21960     +                run;
21961     +            %end;
21963     +        %let EM_META_ADVISOR=BASIC;
21965     +   %end;
21967     +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
21968     +   data _null_;
21969     +      fname = '_text';
21970     +      rc=filename(fname, "&em_user_vvnlabel");
21971     +      if ^rc and fexist(fname) then
21972     +         rc=fdelete(fname);
21973     +     rc=filename(fname);
21974     +   run;
21977     +   /* Validvarname Case */
21978     +   %let newNameFlag = 0;
21979     +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
21980     +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
21981     +        %if &dsid %then %do;
21982     +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
21983     +            %let dsid = %sysfunc(close(&dsid));
21984     +       %end;
21985     +   %end;
21987     +   %if %sysevalf(&newNameFlag>0) %then %do;
21988     +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
21989     +       run;
21990     +       proc sort data=work._any; by VARNUM; run; quit;
21992     +       options validvarname=V7;
21994     +       %procimport(out=work.importfile2);
21996     +       options validvarname=ANY;
21998     +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
21999     +       run;
22000     +       proc sort data=work._v7; by varnum; run; quit;
22002     +       filename _FI "&em_user_vvnlabel";
22003     +       data work._names;
22004     +          length string $200;
22005     +          merge work._v7 work._any;
22006     +          by VARNUM;
22007     +          file _FI;
22008     +          if V7NAME ne NAME then do;
22009     +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
22010     +             put string;
22011     +             if LABEL eq '' then do;
22012     +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
22013     +                put string;
22014     +             end;
22015     +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
22016     +             put string;
22017     +          end;
22018     +          drop string;
22019     +       run;
22020     +       data &em_user_data;
22021     +          set &em_user_data;
22022     +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
22023     +              filename _FI "&em_user_vvnlabel";
22024     +              %inc _FI;
22025     +             filename _FI;
22026     +          %end;
22027     +       run;
22029     +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
22030     +       proc sort data=work._names;             by NAME; run;
22032     +       data &em_user_EMCMETADEFAULT;
22033     +         merge  &em_user_EMCMETADEFAULT _names;
22034     +         by NAME;
22035     +         length DROP $1;
22036     +         DROP='N';
22037     +         if NEWNAME ne NAME then do;
22038     +            if LABEL eq '' then do;
22039     +               LABEL = NAME;
22040     +            end;
22041     +            NAME=V7NAME;
22042     +         end;
22043     +         drop NEWNAME V7NAME VARNUM;
22044     +       run;
22046     +       proc datasets lib=work nolist;
22047     +          delete _any _v7 _names importfile2;
22048     +       run;
22049     +       quit;
22051     +   %end;
22052     +   %else %do;
22053     +       data &em_user_EMCMETADEFAULT;
22054     +          set &em_user_EMCMETADEFAULT;
22055     +          length DROP $1;
22056     +          DROP='N';
22057     +       run;
22058     +   %end;
22060     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
22062     +   data _temp;
22063     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
22064     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
22065     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
22066     +      COLUMNMETAMODTIME=MODTIME;
22067     +   run;
22068     +   proc sort data=&em_data_importset;
22069     +      by PORT;
22070     +   run;
22071     +   data &em_data_importset;
22072     +      merge &em_data_importset _temp;
22073     +      by PORT;
22074     +      if PORT='DATA' then ROLE="&em_property_role";
22075     +   run;
22077     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22079     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22080     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
22081     +            filename x "&em_user_variablesetdelta";
22082     +            data &em_data_variableset;
22083     +               set &em_user_emcmetadefault;
22084     +               %inc X;
22085     +            run;
22086     +            filename x;
22087     +        %end;
22088     +        %else %do;
22089     +            data &em_data_variableset;
22090     +               set &em_user_emcmetadefault;
22091     +            run;
22092     +        %end;
22093     +    %end;
22095     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
22096     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
22097     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
22098     +         id NAME;
22099     +      run;
22101     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
22102     +         data _null_;
22103     +            length string $200;
22104     +            set _DiffMeta end=eof;
22105     +            where _type_='COMPARE';
22106     +            file x1;
22107     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22108     +            put string;
22109     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22110     +            put string;
22111     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22112     +            put string;
22113     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22114     +            put string;
22115     +            put 'end;';
22116     +            if drop='Y' then do;
22117     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
22118     +               put string;
22119     +            end;
22120     +            if eof then
22121     +               put 'drop DROP;';
22122     +         run;
22124     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
22125     +         filename x2 "&em_user_deltacode";
22126     +         %em_copyfile(infref=x1, outfref=x2);
22127     +         filename x1;
22128     +         filename x2;
22130     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
22131     +         filename x "&em_user_variablesetdelta";
22132     +         data _null_;
22133     +            length string $200;
22134     +            set _DiffMeta end=eof;
22135     +            where _type_='COMPARE';
22136     +            file x;
22137     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
22138     +            put string;
22139     +            string = '   ROLE="'!!strip(ROLE)!!'";';
22140     +            put string;
22141     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
22142     +            put string;
22143     +            string = '   ORDER="'!!strip(ORDER)!!'";';
22144     +            put string;
22145     +            string = '   DROP="'!!strip(DROP)!!'";';
22146     +            put string;
22147     +            put 'end;';
22148     +         run;
22149     +         filename x;
22150     +       proc datasets lib=work nolist;
22151     +          delete _DiffMeta;
22152     +       run;
22154     +       data &em_data_exportset;
22155     +          set &em_data_exportset;
22156     +          if NODEPORT='TRAIN' then do;
22157     +             ROLE="&em_property_role";
22158     +             COLUMNMETAMODTIME=datetime();
22159     +             MODTIME=datetime();
22160     +             DATASET="&em_nodeid._train";
22161     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
22162     +             DELTACODE="CDelta_TRAIN";
22163     +             APPLYDELTA='Y';
22164     +             EXPORT='Y';
22165     +             NEEDUPDATE='Y';
22167     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
22168     +                EMINFO="&em_data_eminfo";
22169     +                EMINFOMODTIME=datetime();
22170     +            %end;
22171     +            %else %do;
22172     +                EMINFO='';
22173     +                EMINFOMODTIME=.;
22174     +            %end;
22175     +          end;
22176     +       run;
22177     +   %end;
22179     +  proc contents data=&em_user_data;
22180     +  run;
22181     +  proc datasets library=work nolist;
22182     +   delete importfile importattrs new;
22183     +   quit;
22184     +  run;
22186     +  /* Reset VALIDVARNAME to original settings */
22187     +  options validvarname=&vvnString;
22189     +  %endtrain:
22190     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*xlsx*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.xlsx" out=work.importfile dbms=xlsx replace;
MPRINT(PROCIMPORT):   RXLX;
MPRINT(PROCIMPORT):   run;

NOTE: The import data set has 286 observations and 10 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 286 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT_DATA has 286 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 10 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 10 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

nobs=10  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS1.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

22191      %let SYSCC = 0;
22192      %let _dsidTable = 0;
22193      %let _engineTable =;
22194      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
22195      dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.FIMPORT_DATA');
22196      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
22197      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
22198      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
22199      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
22200      end;
MPRINT(EMADVISECOLUMNS):   end;
22201      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.00 seconds
      

22202      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
22203      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
22204      set EMWS1.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS1.FIMPORT_DATA;
22205      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
22206      output;
MPRINT(EMADVISECOLUMNS):   output;
22207      stop;
MPRINT(EMADVISECOLUMNS):   stop;
22208      end;
MPRINT(EMADVISECOLUMNS):   end;
22209      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22210      proc contents data=EMWS1.FIMPORT_DATA
22211      out=WORK.M00BUVM8 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.FIMPORT_DATA out=WORK.M00BUVM8 noprint;
22212      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M00BUVM8 has 10 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22213      data WORK.M00BUVM8;
MPRINT(EMADVISECOLUMNS):    data WORK.M00BUVM8;
22214      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
22215      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
22216      set WORK.M00BUVM8(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M00BUVM8(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
22217      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
22218      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
22219      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
22220      if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
22221      if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22222      else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
22223      end;
MPRINT(EMADVISECOLUMNS):   end;
22224      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
22225      end;
MPRINT(EMADVISECOLUMNS):   end;
22226      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
22227      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
22228      if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
22229      if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22230      else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
22231      end;
MPRINT(EMADVISECOLUMNS):   end;
22232      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
22233      end;
MPRINT(EMADVISECOLUMNS):   end;
22234      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
22235      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
22236      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
22237      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
22238      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
22239      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 10 observations read from the data set WORK.M00BUVM8.
NOTE: The data set WORK.M00BUVM8 has 10 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22240      data WORK.M00BUVM8;
MPRINT(EMADVISECOLUMNS):    data WORK.M00BUVM8;
22241      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
22242      set WORK.M00BUVM8;
MPRINT(EMADVISECOLUMNS):   set WORK.M00BUVM8;
22243      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
22244      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 10 observations read from the data set WORK.M00BUVM8.
NOTE: The data set WORK.M00BUVM8 has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1NROSXX NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
22248      data WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NROSXX;
22249      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
22250      set WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NROSXX;
22251      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 10 observations read from the data set WORK.M1NROSXX.
NOTE: The data set WORK.M1NROSXX has 10 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M3UL0FPU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   set WORK.M1NROSXX;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   label NEWNAME = "New Variable Name";
MPRINT(EMADVISECOLUMNS):   length NEWNAME $32;
MPRINT(EMADVISECOLUMNS):   NEWNAME=NAME;
MPRINT(EMADVISECOLUMNS):   if NAME ='breast-quad' then NEWNAME="breast_quad";
MPRINT(EMADVISECOLUMNS):   if NAME ='deg-malig' then NEWNAME="deg_malig";
MPRINT(EMADVISECOLUMNS):   if NAME ='inv-nodes' then NEWNAME="inv_nodes";
MPRINT(EMADVISECOLUMNS):   if NAME ='node-caps' then NEWNAME="node_caps";
MPRINT(EMADVISECOLUMNS):   if NAME ='tumor-size' then NEWNAME="tumor_size";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.58 seconds
      cpu time            0.21 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   fname = '_text';
MPRINT(TRAIN):   rc=filename(fname, "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas");
MPRINT(TRAIN):   if ^rc and fexist(fname) then rc=fdelete(fname);
MPRINT(TRAIN):   rc=filename(fname);
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._ANY has 10 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set WORK._ANY.
NOTE: The data set WORK._ANY has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*xlsx*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.xlsx" out=work.importfile2 dbms=xlsx replace;
MPRINT(PROCIMPORT):   RXLX;
MPRINT(PROCIMPORT):   run;

NOTE:    Variable Name Change.  tumor-size -> tumor_size                      
NOTE:    Variable Name Change.  inv-nodes -> inv_nodes                       
NOTE:    Variable Name Change.  node-caps -> node_caps                       
NOTE:    Variable Name Change.  deg-malig -> deg_malig                       
NOTE:    Variable Name Change.  breast-quad -> breast_quad                     
NOTE: The import data set has 286 observations and 10 variables.
NOTE: WORK.IMPORTFILE2 data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(TRAIN):   proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
MPRINT(TRAIN):   run;

NOTE: The data set WORK._V7 has 10 observations and 3 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=work._v7;
MPRINT(TRAIN):   by varnum;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set WORK._V7.
NOTE: The data set WORK._V7 has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   filename _FI "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
MPRINT(TRAIN):   data work._names;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   merge work._v7 work._any;
MPRINT(TRAIN):   by VARNUM;
MPRINT(TRAIN):   file _FI;
MPRINT(TRAIN):   if V7NAME ne NAME then do;
MPRINT(TRAIN):   string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop string;
MPRINT(TRAIN):   run;

NOTE: The file _FI is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06 August 2022 19:43:23,
      Create Time=06 August 2022 16:06:54

NOTE: 10 records were written to the file _FI.
      The minimum record length was 18.
      The maximum record length was 28.
NOTE: There were 10 observations read from the data set WORK._V7.
NOTE: There were 10 observations read from the data set WORK._ANY.
NOTE: The data set WORK._NAMES has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   filename _FI "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas";
NOTE: %INCLUDE (level 1) file _FI is file C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas.
22510     +tumor_size= "tumor-size"n;
MPRINT(TRAIN):   tumor_size= "tumor-size"n;
22511     +drop "tumor-size"n;
MPRINT(TRAIN):   drop "tumor-size"n;
22512     +inv_nodes= "inv-nodes"n;
MPRINT(TRAIN):   inv_nodes= "inv-nodes"n;
22513     +drop "inv-nodes"n;
MPRINT(TRAIN):   drop "inv-nodes"n;
22514     +node_caps= "node-caps"n;
MPRINT(TRAIN):   node_caps= "node-caps"n;
22515     +drop "node-caps"n;
MPRINT(TRAIN):   drop "node-caps"n;
22516     +deg_malig= "deg-malig"n;
MPRINT(TRAIN):   deg_malig= "deg-malig"n;
22517     +drop "deg-malig"n;
MPRINT(TRAIN):   drop "deg-malig"n;
22518     +breast_quad= "breast-quad"n;
MPRINT(TRAIN):   breast_quad= "breast-quad"n;
22519     +drop "breast-quad"n;
MPRINT(TRAIN):   drop "breast-quad"n;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename _FI;
NOTE: Fileref _FI has been deassigned.
MPRINT(TRAIN):   run;

NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set EMWS1.FIMPORT_DATA has 286 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 10 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=work._names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set WORK._NAMES.
NOTE: The data set WORK._NAMES has 10 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_EMCMETADEFAULT _names;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   if NEWNAME ne NAME then do;
MPRINT(TRAIN):   if LABEL eq '' then do;
MPRINT(TRAIN):   LABEL = NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   NAME=V7NAME;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   drop NEWNAME V7NAME VARNUM;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: There were 10 observations read from the data set WORK._NAMES.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _any _v7 _names importfile2;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._ANY (memtype=DATA).
NOTE: Deleting WORK._V7 (memtype=DATA).
NOTE: Deleting WORK._NAMES (memtype=DATA).
NOTE: Deleting WORK.IMPORTFILE2 (memtype=DATA).
MPRINT(TRAIN):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

22520      %let SYSCC = 0;
22521      data EMWS1.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS1.FIMPORT_EMTMETADEFAULT;
22522      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
22523      LIBNAME = "EMWS1";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS1";
22524      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS1.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M3ROVFAG;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M3ROVFAG(obs=1);
MPRINT(EMADVISETABLE):   nobs = 286;
MPRINT(EMADVISETABLE):   ncols = 10;
MPRINT(EMADVISETABLE):   nbytes = 66560;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1975434203.384;
MPRINT(EMADVISETABLE):   modate = 1975434203.384;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRAIN";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS1.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt.
22553     +if NAME="Class" then do;
MPRINT(TRAIN):   if NAME="Class" then do;
22554     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
22555     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
22556     +ORDER="";
MPRINT(TRAIN):   ORDER="";
22557     +DROP="N";
MPRINT(TRAIN):   DROP="N";
22558     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_VARIABLESET has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS1.FIMPORT_VariableSet base=EMWS1.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: There were 10 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 2 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06 August 2022 19:43:23,
      Create Time=06 August 2022 16:06:54

NOTE: 6 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 24.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=06 August 2022 19:43:23,
      Create Time=06 August 2022 16:06:54

NOTE: 6 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\RAHUL AGARWAL\Desktop\new\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=06 August 2022 19:43:23,
      Create Time=06 August 2022 16:06:54

NOTE: 6 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 24.
NOTE: There were 1 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRAIN";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   run;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22559      *------------------------------------------------------------*;
22560      * End TRAIN: FIMPORT;
22561      *------------------------------------------------------------*;

22562      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22563      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22564      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22565      ;
MPRINT(EM_DIAGRAM):   ;
22566      ;
MPRINT(EM_DIAGRAM):   ;
22567      ;
MPRINT(EM_DIAGRAM):   ;
22568      ;
MPRINT(EM_DIAGRAM):   ;
22569      quit;
MPRINT(EM_DIAGRAM):   quit;
22570      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22571      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22572      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22573      /*; *"; *'; */
22574      ;
MPRINT(EM_DIAGRAM):   ;
22575      run;
MPRINT(EM_DIAGRAM):   run;
22576      quit;
MPRINT(EM_DIAGRAM):   quit;
22577      /* Reset EM Options */
22578      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22579      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22580      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
